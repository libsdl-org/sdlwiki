= SDL_PixelFormat =
A structure that contains pixel format information.


== Data Fields ==
{|
|Uint32
|'''format'''
|one of the [[SDL_PixelFormatEnum]] values
|-
|[[SDL_Palette]]*
|'''palette'''
|an [[SDL_Palette]] structure associated with this pixel format, or NULL if the format doesn't have a palette
|-
|Uint8
|'''BitsPerPixel'''
|the number of significant bits in a pixel value, eg: 8, 15, 16, 24, 32
|-
|Uint8
|'''BytesPerPixel'''
|the number of bytes required to hold a pixel value, eg: 1, 2, 3, 4; see [[#bytesperpixel|Remarks]] for related data type
|-
|Uint32
|'''Rmask'''
|a mask representing the location of the red component of the pixel
|-
|Uint32
|'''Gmask'''
|a mask representing the location of the green component of the pixel
|-
|Uint32
|'''Bmask'''
|a mask representing the location of the blue component of the pixel
|-
|Uint32
|'''Amask'''
|a mask representing the location of the alpha component of the pixel or 0 if the pixel format doesn't have any alpha information
|-
|Uint8
|'''Rloss'''
|(internal use)
|-
|Uint8
|'''Gloss'''
|(internal use)
|-
|Uint8
|'''Bloss'''
|(internal use)
|-
|Uint8
|'''Aloss'''
|(internal use)
|-
|Uint8
|'''Rshift'''
|(internal use)
|-
|Uint8
|'''Gshift'''
|(internal use)
|-
|Uint8
|'''Bshift'''
|(internal use)
|-
|Uint8
|'''Ashift'''
|(internal use)
|-
|int
|'''refcount'''
|(internal use)
|-
|[[SDL_PixelFormat]]*
|'''next'''
|(internal use)
|}

== Code Examples ==
8-bit pixel formats are the easiest to understand. Since it is an 8-bit format, we have 8 '''BitsPerPixel''' and 1 '''BytesPerPixel'''. Since '''BytesPerPixel''' is 1, all pixels are represented by a Uint8 which contains an index into <code>palette->colors</code>. So, to determine the color of a pixel in an 8-bit surface: we read the color index from <code>surface->pixels</code> and we use that index to read the [[SDL_Color]] structure from <code>surface->format->palette->colors</code>. Like so:
<syntaxhighlight lang='c++'>
SDL_Surface *surface;
SDL_PixelFormat *fmt;
SDL_Color *color;
Uint8 index;

.
.

/* Create surface */
.
.
fmt=surface->format;

/* Check the bitdepth of the surface */
if(fmt->BitsPerPixel!=8){
  fprintf(stderr, "Not an 8-bit surface.\n");
  return(-1);
}

/* Lock the surface */
SDL_LockSurface(surface);

/* Get the topleft pixel */
index=*(Uint8 *)surface->pixels;
color=&fmt->palette->colors[index];

/* Unlock the surface */
SDL_UnlockSurface(surface);
printf("Pixel Color-> Red: %d, Green: %d, Blue: %d. Index: %d\n",
          color->r, color->g, color->b, index);
.
.
</syntaxhighlight>
Pixel formats above 8-bit are an entirely different experience. They are considered to be "TrueColor" formats and the color information is stored in the pixels themselves, not in a palette. The '''mask''', '''shift''' and '''loss''' fields tell us how the color information is encoded. The '''mask''' fields allow us to isolate each color component, the '''shift''' fields tell us the number of bits to the right of each component in the pixel value and the '''loss''' fields tell us the number of bits lost from each component when packing 8-bit color component in a pixel.
<syntaxhighlight lang='c++'>
/* Extracting color components from a 32-bit color value */
SDL_PixelFormat *fmt;
SDL_Surface *surface;
Uint32 temp, pixel;
Uint8 red, green, blue, alpha;
.
.
.
fmt = surface->format;
SDL_LockSurface(surface);
pixel = *((Uint32*)surface->pixels);
SDL_UnlockSurface(surface);

/* Get Red component */
temp = pixel & fmt->Rmask;  /* Isolate red component */
temp = temp >> fmt->Rshift; /* Shift it down to 8-bit */
temp = temp << fmt->Rloss;  /* Expand to a full 8-bit number */
red = (Uint8)temp;

/* Get Green component */
temp = pixel & fmt->Gmask;  /* Isolate green component */
temp = temp >> fmt->Gshift; /* Shift it down to 8-bit */
temp = temp << fmt->Gloss;  /* Expand to a full 8-bit number */
green = (Uint8)temp;

/* Get Blue component */
temp = pixel & fmt->Bmask;  /* Isolate blue component */
temp = temp >> fmt->Bshift; /* Shift it down to 8-bit */
temp = temp << fmt->Bloss;  /* Expand to a full 8-bit number */
blue = (Uint8)temp;

/* Get Alpha component */
temp = pixel & fmt->Amask;  /* Isolate alpha component */
temp = temp >> fmt->Ashift; /* Shift it down to 8-bit */
temp = temp << fmt->Aloss;  /* Expand to a full 8-bit number */
alpha = (Uint8)temp;

printf("Pixel Color -> R: %d,  G: %d,  B: %d,  A: %d\n", red, green, blue, alpha);
.
.
.
</syntaxhighlight>

== Remarks ==
Everything in the pixel format structure is read-only.

A pixel format has either a palette or masks.  If a palette is used '''Rmask''', '''Gmask''', '''Bmask''', and '''Amask''' will be 0.

<span id="bytesperpixel"></span> The data types used to represent pixels are as follows:
{|
|__Bytes Per Pixel__
|__Related Data Types__
|-
|1
|Uint8
|-
|2
|Uint16
|-
|3
|tuple of Uint8 RGB values
|-
|4
|Uint32
|}

An [[SDL_PixelFormat]] describes the format of the pixel data stored at the <code>pixels</code> field of an [[SDL_Surface]]. Every surface stores an [[SDL_PixelFormat]] in the <code>format</code> field.

If you wish to do pixel level modifications on a surface, then understanding how SDL stores its color information is essential.  See [[#Code Examples|Code Examples]] above for more information.

For information on modern pixel color spaces, see the following Wikipedia article:
http://en.wikipedia.org/wiki/RGBA_color_space


== Related Structures ==
:[[SDL_Surface]]

== Related Functions ==
:[[SDL_ConvertSurface]]
:[[SDL_GetRGB]]
:[[SDL_GetRGBA]]
:[[SDL_MapRGB]]
:[[SDL_MapRGBA]]
:[[SDL_AllocFormat]]
:[[SDL_FreeFormat]]
----
[[CategoryStruct]], [[CategoryPixels]]
