== Draft ==

'''THIS PAGE IS A WORK IN PROGRESS''' ... Please make edits to this page to improve it!


<!-- #*^*^*^*^*See https://wiki.libsdl.org/SGFunctions for details on editing this page*^*^*^*^* -->
= SDL_GameControllerGetStringForAxis =

Convert from an [[SDL_GameControllerAxis]] enum to a string.

== Syntax ==

<syntaxhighlight lang='c'>
const char* SDL_GameControllerGetStringForAxis(SDL_GameControllerAxis axis);
</syntaxhighlight>

== Function Parameters ==

{|
|'''axis'''
|an enum value for a given [[SDL_GameControllerAxis]]
|}

== Return Value ==

Returns a string for the given axis, or NULL if an invalid axis is
specified. The string returned is of the format used by
[[SDL_GameController]] mapping strings.

== Code Examples == 
<!-- #Example1 Start -->
<syntaxhighlight lang='c'>
#include <stdio.h>
#include <stdlib.h>

#include <SDL.h>

int main(int argc, char* argv[])
{
    int running = 1;
    SDL_Event event;

    if(SDL_Init(SDL_INIT_GAMECONTROLLER) < 0)
    {
        SDL_LogError(SDL_LOG_CATEGORY_APPLICATION, "Error while initializing SDL2 library : %s\n", SDL_GetError());
        return EXIT_FAILURE;
    }

    while(running)
    {
        if(event.type == SDL_QUIT)
        {
            running = 0;
        }

        if(event.type == SDL_CONTROLLERAXISMOTION)
        {
            char const* axisName = SDL_GameControllerGetStringForAxis((SDL_GameControllerAxis) event.caxis.axis);
            int axisValue = event.caxis.value;
            SDL_Log("Axis used : %s\tAxis value : %d\n", axisName, axisValue);
        }
    }

    SDL_Quit();

    return EXIT_SUCCESS;
}
</syntaxhighlight>
<!-- #End Example1 -->

== Remarks ==

The caller should not [[SDL_free]]() the returned string.

== Version ==

This function is available since SDL 2.0.0.

== Related Functions ==

:[[SDL_GameControllerGetAxisFromString]]

----
[[CategoryAPI]], [[CategoryGameController]], [[CategoryDraft]]


