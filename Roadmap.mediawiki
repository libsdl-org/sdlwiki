= SDL 2.0 Roadmap =

This is a list of features which are in progress for the SDL 2.0 release.  The features are organized by subsystem and assigned to developers.  Features will move around as the design evolves.

<<TableOfContents(2)>>

== Video ==

=== Complete ===
* <span style="color: green;">Sam: Add support for multiple windows</span>
* <span style="color: green;">Sam: Create 3D accelerated texture based rendering API</span>
* <span style="color: green;">Sam: Create API for enabling/disabling the screensaver</span>
* <span style="color: green;">Sam: Add support for selecting video mode refresh rate</span>
* <span style="color: green;">Sam: Create API for clipboard support (check out PyGame)</span>
* <span style="color: green;">Sam: Add support for multiple displays</span>
* <span style="color: green;">Sam: Add concept of viewport to fullscreen windows</span>
* <span style="color: green;">Sam: Add support for synchronizing 2D updates with vblank, using SDL_HINT_RENDER_VSYNC</span>
* <span style="color: green;">Mason Wheeler and Gabriel Jacobo: Add support for render targets</span>


=== Required ===
* Ryan: Implement landscape mode for iPhone port
* Sam: Add support for OpenGL context profiles
* Sam: Create flags for specifying foreign window event behavior
* <span style="color: green;">Andreas: Support shaped windows</span>
* <span style="color: green;">Windows</span>
* Mac OS X
* <span style="color: green;">Linux</span>

=== Wishlist ===
* <span style="color: gray;">Create desktop video mode change notification</span>
* <span style="color: gray;">Support always-on-top window styles</span>
* <span style="color: gray;">Support multiple icon sizes (e.g. for Windows Vista)</span>
* <span style="color: gray;">Implement NET_WM_PING and NET_WM_PID/WM_CLIENT_MACHINE (http://standards.freedesktop.org/wm-spec/wm-spec-1.3.html#KILLINGWINDOWS)</span>
* <span style="color: gray;">Support desktop windows</span>
   <syntaxhighlight lang='c++'>
        setAttribute(Qt::WA_X11NetWmWindowTypeDesktop);
        setWindowFlags(Qt::SplashScreen);

        Qt::WindowFlags flags = 0;
            flags |= Qt::FramelessWindowHint;
            flags |= Qt::Tool;
            flags |= Qt::WindowStaysOnBottomHint;
</syntaxhighlight>

== Audio ==

=== Complete ===
* <span style="color: green;">Ryan: Add support for float and 32-bit int audio formats</span>
* <span style="color: green;">Ryan: Add support for 7.1 speaker output</span>

=== Required ===
* <span style="color: green;">Ryan: Create audio recording API</span>
* Windows
* Mac OS X
* Linux
* <span style="color: green;">Ryan: Add support for multiple audio devices</span>
* Windows
* Mac OS X
* Linux
* Ryan: Add support for audio device live connect and disconnect
* Ryan: Add support for non-power-of-two audio rate conversion

=== Wishlist ===
* <span style="color: gray;">PCM volume control</span>

== Event ==

=== Complete ===
* <span style="color: green;">Sam: Add a way to dynamically register for custom event types</span>
* <span style="color: green;">Add a timeout parameter for [[SDL_WaitEvent]]() (http://lists.libsdl.org/pipermail/sdl-libsdl.org/2008-May/thread.html#65067)</span>

=== Required ===
* Sam: Add modifier state to key and button events
* Sam: Resolve question of how to represent iOS events which need to be handled before dispatch returns

=== Wishlist ===
* <span style="color: gray;">Add a timestamp to events</span>

== Mouse Input ==

=== Complete ===
* <span style="color: green;">Sam: Mousewheel has a separate event</span>
* <span style="color: green;">Sam: Support showing / hiding the cursor</span>
* <span style="color: green;">Sam: Add support color cursors</span>

=== Required ===
* Sam: Reimplement mouse grab support
* Verify cursor location is correct when ungrabbed
* Verify proper behavior with Vista DPI scaling

=== Wishlist ===
* <span style="color: gray;">Ryan: Add support for multiple mice</span>
* Q: What is the mapping of individual mice to pointers?  Is there a "master pointer" that multiple mice share and then events for the individual mice?  Is there a dual mode, where you have a single pointer that all mice affect, and you can switch to multiple pointers, each affected by a single mouse?
* A: I remember only "Lemmings 2 The tribes" allowed to have 2 players playing at the same time in split screen, each with their own mouse
* <span style="color: gray;">Pressure/tilt support for tablet like devices</span>
* <span style="color: gray;">Add support animated cursors</span>

== Keyboard Input ==

=== Complete ===
* <span style="color: green;">Sam: Create new text input event separate from key events</span>

=== Required ===
* Q: When you're enabling or disabling text events via keystroke, how do you ignore the text generated by the key that is toggling text input?
    A: Key events are guaranteed to happen first
* Sam/Jiang/Daniel: Create IME API and support system IME interfaces
* <span style="color: green;">Windows</span>
* <span style="color: green;">Mac OS X</span>
* Linux
* Sam: Add name to keysym and name to scancode lookup functions

== Joystick Input ==

=== Complete ===
* <span style="color: green;">Edgar: Create Force Feedback API</span>

=== Required ===
* Ryan: Add support for joystick device live connect and disconnect

== Multi-touch Input ==

=== Complete ===
* <span style="color: green;">Jim: Create multi-touch input API</span>

== Multi-threading ==

=== Complete ===
* <span style="color: green;">Sam: Create API for getting the number of CPUs</span>
* <span style="color: green;">Bob: Create API for atomic operations on data</span>
* <span style="color: green;">Sam: Remove unsafe SDL_KillThread() API</span>
* <span style="color: green;">Sam: Create API for thread priority</span>

== Timers ==

=== Complete ===
* <span style="color: green;">Sam: Add higher precision timers for profiling</span>

== General ==

=== Complete ===
* <span style="color: green;">Ryan: Create API for assertions</span>
* <span style="color: green;">Sam: Public license for SDL_compat.c, tests, and SDL_main*</span>
* <span style="color: green;">Sam: Figure out the best way to support simultaneous SDL 1.2 and SDL 2.0 installations</span>
* <span style="color: green;">Sheena: Finish 2.0 API documentation</span>

=== Required ===
* Sam: Write introductions for SDL 2.0 API documentation

=== Wishlist ===
* <span style="color: gray;">Create an API for live video capture</span>
* <span style="color: gray;">Create an API for accelerometer data</span>
* <span style="color: gray;">Create extended set of (negative) error codes and have the API functions document and return them</span>

=== Other details ===
Ryan has more information on the SDL 2.0 changes that you can find here: <br/>
http://icculus.org/cgi-bin/finger/finger.pl?user=icculus&date=2007-10-07Â§ion=sdl13
